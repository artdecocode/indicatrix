{
"version":3,
"file":"compile/indicatrix.js",
"lineCount":24,
"mappings":"A;AAGAA,MAAAC,QAAA,GCMeC,cAAyB,CAACC,CAAD,EAAOC,CAAP,EAAgBC,CAAA,GAAU,EAA1B,CAA8B;AACpE,QAAM,CAAE,SAAAC,CAAA,GAAW,GAAb,EAAkB,SAAAC,CAAA,GAAWC,OAAAC,OAA7B,CAAA,GAAgDJ,CAAtD;AACMK,GAAAA,GAAsB,UAAlB,IAAA,MAAON,EAAP,GAA+BA,CAAA,EAA/B,GAA2CA,CAA/CM;AACN,QAAMC,IAAQJ,CAAAI,MAAAC,KAAA,CAAoBL,CAApB,CAAd;AAEA,GAAM,CAAE,uBAA0BM,CAA5B,CAAN,GAAkDL,OAAAM,IAAlD;AACA,MAAID,CAAJ,IAAkC,GAAlC,IAAmBA,CAAnB;AAEE,WADAF,CAAA,CAAM,GAAGR,CAAH,0BAAN,CACO,EAAA,MAAMO,CAAb;AAFF;AAKA,MAAIK,IAAI,CAAR,EAGIC,IAFkB,GAAGb,CAAH,GAAU,GAAAc,OAAA,CAAWF,CAAX,CAAV,EADtB;AAIAJ,GAAA,CAAMK,CAAN,CAAA;AACME,GAAAA,GAAMC,WAAA,CAAY,EAAA,IAAM;AAC5BJ,KAAA,IAAKA,CAAL,GAAS,CAAT,IAAc,CAAd;AACAC,KAAA,GANoB,GAAGb,CAAH,GAAU,GAAAc,OAAA,CAAWF,CAAX,CAAV,EAMpB;AALkBJ,KAAA,CAAM,KAAK,GAAAM,OAAA,CAAWd,CAAAiB,OAAX,GAAyB,CAAzB,CAAL,IAAN,CAMlB;AACAT,KAAA,CAAMK,CAAN,CAAA;AAJ4B,GAAlB,EAKTV,CALS,CAANY;AAMN,KAAI;AAEF,WADYG,MAAMX,CAClB;AAFE,GAAJ,QAGU;AACRY,iBAAA,CAAcJ,CAAd,CAbkB,EAAAP,CAAA,CAAM,KAAK,GAAAM,OAAA,CAAWd,CAAAiB,OAAX,GAAyB,CAAzB,CAAL,IAAN,CAclB;AAFQ;AAzB0D,CDNtE;;",
"sources":["src/depack.js","src/index.js"],
"sourcesContent":["import '../types/externs'\nimport indicatrix from './'\n\nmodule.exports = indicatrix","/**\n * Will print the loading text and refresh the CLI line to show the ellipsis while the promise is loading.\n * @param {string} text The text to display in the CLI.\n * @param {!Promise<T>|function(...*): !Promise<T>} promise The promise or an async function that returns the promise.\n * @param {!_indicatrix.Options} [options] The optional options for the indicator, such as the refresh interval.\n * @param {number} [options.interval=250] The interval with which to update the screen. Default `250`.\n * @param {!(NodeJS.WriteStream|stream.Writable)} [options.writable=\"process.stdout\"] The writable stream used for printing data with the `.write` method. Default `process.stdout`.\n * @template T\n */\nexport default async function indicatrix(text, promise, options = {}) {\n  const { interval = 250, writable = process.stdout } = options\n  const p = typeof promise == 'function' ? promise() : promise\n  const write = writable.write.bind(writable)\n\n  const { 'INDICATRIX_PLACEHOLDER': placeholder } = process.env\n  if (placeholder && placeholder != '0') {\n    write(`${text}<INDICATRIX_PLACEHOLDER>`)\n    return await p\n  }\n\n  let i = 1\n  const getText = () => `${text}${'.'.repeat(i)}`\n  const clear = () => write(`\\r${' '.repeat(text.length + 3)}\\r`)\n  let s = getText()\n  write(s)\n  const int = setInterval(() => {\n    i = (i + 1) % 4\n    s = getText()\n    clear()\n    write(s)\n  }, interval)\n  try {\n    const res = await p\n    return res\n  } finally {\n    clearInterval(int)\n    clear()\n  }\n}\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('..').Options} _indicatrix.Options\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('stream').Writable} stream.Writable\n */"],
"names":["module","exports","indicatrix","text","promise","options","interval","writable","process","stdout","p","write","bind","placeholder","env","i","s","repeat","int","setInterval","length","res","clearInterval"]
}
